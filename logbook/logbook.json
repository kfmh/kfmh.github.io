{
    "2023": {
        "Dec": {
            "03":{
                    "weekday": "Sunday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Set out to implement speech-to-text (STT) functionality to move chess pieces and text-to-speech (TTS) to hear the move from the chess engine.",
                    "methods":"For generating TTS and STT I’m using Huggingface api-inference. TTS is done with the fastspeech2-en-ljspeech model by Meta, formerly facebook. STT I’m using OpenAI’s whisper-large-v2. To keep expenses low while focusing on interaction design and writing necessary ground architecture, I am using free api-inference endpoints with limited computational power. This leads to slow responses, but for now this is not an issue.",
                    "agenda":"",
                    "insights":"As the purpose of the uw-chess is to play blindfold Chess.TI haven't put much thought into chess-board rendering. For now the chess-board is rendered with ASCII graphics, this is not a conscious choice, but the default render the python-chess package generates when printing to the terminal window. While testing with ASCII design I noticed how the basic representation of the board is good for practicing with your eyes open. It’s just slightly easier than having your eyes closed. So I will add a flag for choosing ASCII, Classic-2D or only voice.",
                    "conclusions":"uw-chess is coming along nicely, the absolute basics are in place while minor detales still need to be addressed for the POC. Next up is to add conditions to the UCI (Universal Chess Interface) formatting function for the STT response when attempting to castle, or when a pawn reaches the 8th rank.",
                    "image": "./logbook/images/2023-12-03_gameplay.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "04":{
                    "weekday": "Monday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Cleaning up functions with error handling, adding flags for passing arguments like bot difficulty level and chess board graphics. ",
                    "methods":"The whisper-large-v2 STT model is slow and it is becoming frustrating. Switch to a community created distil-whisper model with supposedly faster inference. whisper-large-v2 was api-inference, and distil-whisper is running locally on my apple silicone M2. It should run faster but there is some process taking unnecessary time. Added a Pygame render for the chess board.",
                    "agenda":"",
                    "insights":"There is more work revealing itself all the time, but I need to keep it simple and do rapid prototyping.",
                    "conclusions":"Everything takes longer than I think, still making great progress, maybe even moving a little bit too fast. Having lots of fun though, chess is an amazing game and I really can't wait to start playing full games.",
                    "image": "./logbook/images/2023-12-04_gameplay.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "05":{
                    "weekday": "Tuesday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Today's objective was to finish the bare minimum to start user testing. This included some basic error handling, cleaning up the game render loop, adding argument parsing for bot difficulty and improving the UCI (Universal Chess Interface) formatting from the speech to text response. I'm the only user at this stage but at the end of the week I should have a functioning python package ready for testing.",
                    "methods":"For rendering the 2D chess board I'm using Pygame's python package, it gets the job done for rapid prototyping but the package is overkill for just rendering chess moves. Once I have the interaction design working I'll code a custom rendering process. I'm running distil-large-v2, (a distilled version of Open AI’s Whisper model) locally on my Mac M2 and it works really well, but it's a two step process. First there is a speech recognition process, recording the voice and I need to configure it better. A lot of time is wasted on recording audio long after I'm finished talking or it stops recording while I'm still pondering the next move and goes through all the steps after before looping around to recording again. I'll have to configure the ambient noise threshold and shorten the time of listening to silence. For the text to speech I’m using facebook/fastspeech2-en-ljspeech via a Hugging Face api-inference endpoint. This is also slow but I know it’s limited processing for the free API which I’m grateful for. My plan is to find a lightweight model I can run locally or spin up my own inference endpoint and pay for stronger compute power. It is also not so reliable on the TTS, but I believe it has to do with my UCI formatting function.",
                    "agenda":"",
                    "insights":"Recorded my first project demo tonight, wow it’s difficult to be good at sharing the enthusiasm, but I'm really tired and it's late. Marketing is something I’ve been reading and learning more about, it’s a good lesson to force myself to just get something on video even if I'm the only one excited about it.",
                    "conclusions":"I honestly had a blast today, I finally got to play and I can see myself getting really nerdy with blindfold chess. The goal for tomorrow is to get through a full game, for that i'll need to fix some more bugs.",
                    "image": "",
                    "video_url": "https://www.youtube.com/embed/1wvanX-nkVc?si=2qsHtPq2mhasSZAs",
                    "alt_text": ""
                },
            "06":{
                    "weekday": "Wednesday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"The goal was to complete a full game without the program breaking and to improve the runtime functions, but most of the day was spent on fixing UX on this site, scheduling LinkedIn content and planning other projects.",
                    "methods":"The text-to-speech and speech-to-text is far from optimal. Managed to look at the code base but no improvements worth mentioning. In order to complete a python package by monday i'll probably need to rebuild some classes from scratch. The function I'm using now I've copied from another project I’m working on using STT and TTS. ",
                    "agenda":"",
                    "insights":"I enjoy designing, drawing and all that jazz, but I hate web design, maybe because I'm not schooled in it or because so much time is wasted on “pixel pushing”. But Im happy with this site now and won't have to work on it for a long time now. ",
                    "conclusions":"Every day can’t be 2 steps forward, today was at least not a step back. What feels good though is keeping this logbook. It is an improvement to my development journey, and I see the value in evaluating the day like this. ",
                    "image": "",
                    "video_url": "",
                    "alt_text": ""
                },
            "07":{
                    "weekday": "Thursday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Yesterday It felt like I was moving sideways and today I was soaring. Took a look at both speech-to-text (STT) and text-to-speech (TTS) to see where I could optimize. Both scripts were initially created for another project using a similar interaction design so it's kind of like I picked a wrench from the toolbox and used it as a wrench as a hammer. ",
                    "methods":"I removed half the STT script because there was only one function I needed, it uses a speech recognition package that I previously only used as an event listener for activating a more robust STT model. Because playing chess only needs short repetitive phrases I wanted to see if the speech recognition process was enough for this purpose. It’s safe to say it was not, but it’s a step forward. I'll need to investigate if I can fine tune it or go back to the old version using a distilled Whisper model which I know I can fine tune. ",
                    "agenda":"",
                    "insights":"I had something good i thought about earlier today, but i can't remember now. Need to start making notes throughout the day.",
                    "conclusions":"It was a good day, I needed to look at the event loop and specifically the speech to text. Text to speech is fine now for the POC, but I need to work on the audio error messages. I should try doing a real blindfold test tomorrow to get an accurate feel. Probably a lot I'm missing with the blindfold interaction design.",
                    "image": "",
                    "video_url": "",
                    "alt_text": ""
                },
            "08":{
                    "weekday": "Friday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Today I took a somewhat educational and creative break. Been reading about AGI and philosophizing about where I could take UW-chess. I still managed to record a new demo with the latest updates, and found some unnecessary  processes I could optimize. The game is slightly improved and I feel confident I'll finish the POC by monday.",
                    "methods":"Implemented a decorator function for logging the duration it takes to run functions in the event loop and noticed that rendering the game board was extremely inefficient. Also decreased the sleep() function from 2s to 0.5s. I implemented it to give some space between player actions and chess-bot action. These improvements were done after the demo video. I also drew some chess pieces but they ended up looking really bad when rendered to the board",
                    "agenda":"",
                    "insights":"At this stage the POC is almost ready, but it lacks a lot of interaction design. Tomorrow i'll do test blind folded and from that i'm sure i'll find valuable insights.",
                    "conclusions":"This isn’t a complicated application, neither the interaction design or the machine learning is advanced at this stage but this project has a lot of hidden possibilities that is exciting to think about. ",
                    "image": "./logbook/images/chess_pieces.png",
                    "video_url": "https://www.youtube.com/embed/9C3ttUqd-b4?si=dgzWE9UG5MhxepBp",
                    "alt_text": ""
                },
            "09":{
                    "weekday": "Saturday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Testing blindfold interaction design to find where I should focus improvements before finalizing the proof of concept for monday. Besides playing a lot of games another way of practicing chess is to look at specific scenarios, but the first step of blindfold chess is to practice awareness so implementing a function for randomly generating a number of pieces to start with. For example starting with only 8 pieces in total on the board.  This would be an intermediary level to practice board awareness, and gradually increase how many pieces to keep track of.",
                    "methods":"The first thing that is disorienting is the speech-to-text record looping. There is a short gap when the loop circles back around where it isn't recording. To mitigate this poor interaction for now I have an alert sound for each cycle not returning a proper UCI string, but I'm working on making the STT recording and speech analysis asynchronous function that can run continuously so there isn’t a gap between each cycle. The function for generating a random chess scenario with a specific set of pieces is for now a loop that plays the game until the desired amount of pieces are left, then the function returns all the moves made and the current board for the user to take over. ",
                    "agenda":"",
                    "insights":"For the POC I will focus on the new function for random board generation, and the STT loop async architecture. I'm very new to working with asynchronous functions so this is a bit of a challenge but it will improve the overall experience.",
                    "conclusions":"I'm not sure i'll finish till monday, but one full day should be enough for this. It doesn't feel like much left but it probably is. ",
                    "image": "",
                    "video_url": "",
                    "alt_text": ""
                },
            "10":{
                    "weekday": "Sunday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Today I set out to Finish a proof of concept (POC) that can be installed as a python package. The feature I'm most excited about is the random board setup generator. Since it is a training tool for practicing blindfold chess there should be a way of incrementally increasing the difficulty, so there will be 2 parameters for difficulty as part of the POC version. The 1st parameter is the amount of pieces on the board so users can start tracking 4 and gradually increase to - 32 pieces. The 2nd parameter is rendering chess-board coordinate visibility. Board will have 3 levels with easy = (x,y) visible for each tile, moderate = classic coordinates viability showing left column, and bottom rank. And a hard = blank board. - [13:30]",
                    "methods":"The generated random board function is a loop that plays the game until the required amount of pieces are left, appends all moves to a list and returns all moves and current chessboard state. - [15:30]. To make the bord coordinates rendering easy to code I premade a PNG background element, which also requires less work from the script. I don't know why I didn't do this from the start - [18:30]. The Python package is done, now what’s left is to write documentation and update. I'll leave that for tomorrow - [00:00]",
                    "agenda":"",
                    "insights":"Today I've tried writing logs frequently throughout the day. I make more sense and I don't forget as much. I’ll try keeping up with this logbook model. Besides feeling good that I've finished most of the work for the POC, I got inspired to display this project on the LinkedIn group “Python Developers Community”, it is in line with the guidelines of the content they post. - [00:00]",
                    "conclusions":"It was a good day to program. There is still a lot of small fixes to be made but i'll start working on a separate branch now and leave the main branch as is - [00:00]",
                    "image": "./logbook/images/chess_board_render.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "11":{
                    "weekday": "Monday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Today's main focus is to finalize the proof of concept and python package. The application is far from decent but it works enough to get a feel for its potential. Going over the code today I'll implement an “Occam's razor” approach, simplify and remove rather than write more lines - [09:00].",
                    "agenda":["Argpaser for chess engine path", "Update readme with installation and usage instructions", "Write basic documentation", "Improve code comments, docstrings and readability"],
                    "methods":"Using Chat GPT to generate docstring and comments, there is still a lot I have to add but it probably cuts the time in half. -[13.00]",
                    "insights":"Creating a well structured base architecture and comprehensive documentation from the start will make this project a lot more manageable for future improvements and ideas. It’s amazing how much faster I can work when I can generate boilerplate on the fly. Feel like I'm one of 5 people - [13.00]. The “Read Me” is updated with installation instructions and basic requirements. Haven't really done any logic updates, but will dedicate the rest of the week for that and proper documentation - [16.00].",
                    "conclusions":"Like I stated in today's objective “The application is far from decent” but boy does it feel good to push Undr Wolf V1 - [16.00].",
                    "image": "",
                    "video_url": "",
                    "alt_text": ""
                },
            "12":{
                    "weekday": "Tuesday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Today is an educational day, going to dive into asynchronous programming, threading and multiprocessing. One of these approaches will improve the interaction with the speech-to-text STT event. Since one event is recording and the other is analyzing the recording, this should be possible to continuously record and analyze in tandem, so thus to not have a break not noticeable to the user, leading to disorientation - [09:00].",
                    "agenda":[],
                    "methods":"It seems like multiprocessing will work best, even though the workload now is simple, sperateing recording and analyzing on dedicated processes leaves upside to add on to the STT functionality - [21:00].",
                    "insights":"Natural communication with AI is very interesting, while it isn’t anything innovative in and of itself. Creating natural voice communion for the user is a very interesting challenge, most of all because I have to evaluate how the system should process the information. I.e 2 cognitive processes sharing information while continuously working, like the brain. We as humans don’t process synchronously, or asynchronously. It feels closer to multiprocessing - [21:00].",
                    "conclusions":"Did not get much done on the uw_chess, but did move the needle slightly. Testing multiprocessing is a milestone for me in my developer journey. I can see how powerful multiprocessing is when building AI applications - [21:00].",
                    "image": "",
                    "video_url": "",
                    "alt_text": ""
                },
            "13":{
                    "weekday": "Wednesday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Create a working multiprocessing script for speech to text STT, so that no speech is missed. If I create a working function for this I can later switch out the model doing the analysis to a stronger to improve reliability and over all interaction design - [08:30].",
                    "agenda":["STT multiprocessing prototype", "Revise 'Read Me'", "Revise code documentation"],
                    "methods":"The STT multiprocessing is beautiful, although I still have the problem of having och cuts in the middle of sentences. I'll mitigate this by implementing a rolling window of recorded data, and create a python package for real time STT that I can use in the  uw_chess - [16:00]. Updated Readme and added some more visuals - [20:00]",
                    "insights":"The philosophy of mind is a topic I'm passionate about, and after building with multiprocessing  I get reminded of the integrated information theory of consciousness. Admittedly my understanding of the concept is superficial. But I think multiprocessing falls in line with that theory - [16:00].",
                    "conclusions":"Got to work harder, might have to many balls in the air, this logbook is only tracking one project by choice. This logbooks helps me have one project grounded and steady - [00:00].",
                    "image": "",
                    "video_url": "",
                    "alt_text": ""
                },
            "14":{
                    "weekday": "Thursday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"There's a lot I want to get done today, the uw_realtime_stt package is the main focus. This will be a keystone for other projects I’m planning. What’s left for uw_realtime_stt 1.0.0-alpha is a rolling window analysis loop to mitigate cuts in the recording where audio is missed - [08:00]",
                    "agenda":["Rolling window analysis loop", "alpha build", "Demo video"],
                    "methods":"The rolling window isn’t going to work, it splits up audio in a uniform sequence, which leads to cuts in the middle of words. When the model predicts a sentence, it doesn't predict word by word, but makes a prediction on the entire audio, so if one word is cut off i will alter the rest of the sentence as well - [16:00]. Image above show's the last failed test of me reading a section from the logbook. “pyproject.toml” and directory structure is good to go as soon I'm ready with the buffer functionality for the audio stream - [01:30 Friday]",
                    "insights":"All of this is new and today it’s clear that I don't know enough to have an accurate feel for how long this is going to take. In essence I'm doing it correctly by creating a buffer, but my method of creating the buffer is a bit jerry-rigged. [01:30 Friday]",
                    "conclusions":"Ended the last coding session in a bad mood but had a really good blitz streak on chess.com for the past like 4h. Really tired now, but excited to finish this chess app. It’s going to feel great playing when it’s done - [01:30 Friday]",
                    "image": "./logbook/images/2023-12-14.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "15":{
                    "weekday": "Friday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Heading out to do some errands for the day but I'll squeeze in a session for the evening. It’s only one thing on the agenda, it's going to feel better adding tasks later, rather than not completing the task. Probably going to play some Blitz on chess.com to. It’s Friday after all - [10:30]",
                    "agenda":["Build and test audio buffer"],
                    "methods":"Barely got an hour coding on the real-time script, most just googling. Made one test with the buffer. I need to look at the appending buffer and stream to analyze workflow - [01:00 Saturday]",
                    "insights":"Nothing worth mentioning - [01:00 Saturday]",
                    "conclusions":"I know what to do now - [01:00 Saturday]",
                    "image": "",
                    "video_url": "",
                    "alt_text": ""
                },
            "16":{
                    "weekday": "Saturday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Same thing as yesterday. The problem I'm having with realtime speech-to-text STT is that at some point the recording has to be cut and passed to the analyze function to predict the text. If a word is cut off it will alter the parts or the entire sentence to grammatically fit the sound of the word that is cut off in the end or beginning. To mitigate this the buffer should only be flushed when there is a clear pause in a sentence. Until it is flushed the whole buffer data will be analyzed on each iteration that sound is appended. This part is relatively straightforward using python multiprocessing, but it’s the audio streaming to the buffer I'm not sure how to implement correctly, it must be continuous without any sort of break. I've tried running two recording functions in tandem, but the library I'm using for audio recording isn’t meant to function like this. I might have to create my own for this. First I'll do some tests of asynchronous recording event loops and see if that is enough  - [14:00].",
                    "agenda":["Build and test audio buffer"],
                    "methods":"Buffer is working now as the sketch, just need to feed the prediction model. Moving away from Speech recognition and making a record function using Pydub library. Tomorrow I'll look at implementing predictions - [00:00].",
                    "insights":"Played chess until 4 in the morning. Had to blow off steam because of the lack of progress with the audio-buffer. At the end I was playing so badly that the attempt to blow off steam was counterproductive, it was still fun and I feel mentally and creatively replenished. - [14:00].", 
                    "conclusions":"Didn’t get as  much coding done today as i wanted, felt like tendering to other matters. But I need to step it up and finalize this so I can move on to the next project  - [00:00].",
                    "image": "./logbook/images/2023-12-16_sketch.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "17":{
                    "weekday": "Sunday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Today is the day to “Get everything to sing!“, not that confident I’ll finish it today, but as soon as the speech-to-text works I can then implement it into uw_chess. The speech to text package will also be a substantial feature on another project in the pipeline - [11:00]",
                    "agenda":["Buffer and analysis workflow", "Recode demo video"],
                    "methods":"The buffer works well but needs some optimizations for the condition that flushes the buffer when detecting silence. I ran into data conversion errors when analyzing and transcribing the audio. It works with the Whisper-STT model because it uses the same bytes data as the buffer stores the audio, but the free whisper API from Hugging Face interference is too slow for analyzing streams of audio. I would like to keep testing the workflow with google’s STT api, so I need to fix the conversion. It’s probably not a big issue to fix, I'm just not focused today. - [00:00].",
                    "insights":"Nothing worth mentioning - [00:00].", 
                    "conclusions":"Might be spreading myself too thin, I’ve gotten other important work done but I haven't given this STT my full attention this weekend. Haven’t rested property, need to get back to a better sleep cycle. It’s a new week tomorrow and it feels good!  - [00:00].",
                    "image": "",
                    "video_url": "",
                    "alt_text": ""
                },
            "18":{
                    "weekday": "Monday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"New week, an opportunity to start fresh. I have projected down the pipeline that relies heavily on this speech to text component for uw_chess. I will make it work today - [07:00].",
                    "agenda":["Buffer and analysis workflow", "Recode demo video"],
                    "methods":"I’m so close, and really tired, I just need one or two more days before integrating this new STT to uw_chess. I’ve left google STT api behind one back to run Distil whisper-large locally. It works well but I keep getting a message that I need to add special tokens that it has not been trained on, which is really strange. I’ll look into what tokens are not included tomorrow- [Tuesday 02:00].",
                    "insights":"Started the morning listening to Elon Musk’s biography, it makes me want to work harder. I know what must be done, but lack consistency. Can’t rely on motivation, I need to update the system by which I operate - [07:00].", 
                    "conclusions":"Once I get this to work properly, I'm going to buy a box of wine and play chess until the box is empty - [Tuesday 02:00].",
                    "image": "./logbook/images/2023-12-16_sketch.png",
                    "video_url": "https://www.youtube.com/embed/QTmYrX1jGj0?si=6WBilxkGkbsHeVbr",
                    "alt_text": ""
                },
            "19":{
                    "weekday": "Tuesday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"I’d like to finish what I believe to be the most critical components (listed below) that need to be addressed before I can move on to implementing uw_realtime_stt into uw_chess. The special tokens warning is driving me crazy, I need to figure out how to list the tokens that are not in the  tokenizer. Which seems to be like a needle in a haystack, there has to be a simple solution to this - [09:00].",
                    "agenda":["special tokens warning", "Install package test", "Improve responsiveness and speed"],
                    "methods":"The warning message might be a conflict with how the distill-whisper fork and the original whisper model are integrated with the transformers API, it’s a guess, but i don’t know. What I do know is that I need to create my own fine tuned version specifically for chess moves. Eny how, suppressed the message with a logging condition, not good practice but this isn’t the final product - [23:00]",
                    "insights":"Automatic speech recognition is like the phenomenon when lyrics in songs sound different depending on the listeners because the utterances of different sentences are phonetically sound very similar. Context is very important, and humans are very good at interpreting context. How do I design context? - [23.00]", 
                    "conclusions":"It’s late now - [01.30 wednesday]",
                    "image": "./logbook/images/2023-12-19.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "20":{
                    "weekday": "Wednesday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Uw_realtime_stt is far from great, I might spin up a hugging face inference endpoint and test the speed improvement from stronger GPUs. 'perfection is the enemy of progress' and I need to move on. Once I've tried the uw_chess app with the modified STT I can rank what process needs to be received first - [08:30]",
                    "agenda":["Test Install package, commit-push", "Write Readme.md"],
                    "methods":"Install from source ‘pip install git+https://github.com/kfmh/uw_realtime_stt.git’. It only works with apple silicon and metal GPU. ",
                    "insights":"I don’t think anyone is reading this logbook, but I feel a need to put more effort and care into it. If someone visits this logbook, it’s a snapshot of time and whatever they read will be the first impression that either captivates or repelle’s their attention. But also for my own sake, I can see myself reading this in the future and remembering what went down - [08:30]. Presentation and writing a good ‘ReadMe’ for a code base is difficult, but it makes me examine the work harder to find pitfalls in logic and structure - [22:30].", 
                    "conclusions":"I'm probably closer to the middle than end of the proof of concept for uw_chess and it’s the holidays soon  - [22:30].",
                    "image": "./logbook/images/2023-12-20.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "21":{
                    "weekday": "Thursday",
                    "project":"uw-chess Blindfold Chess Trainer",
                    "objective":"Heading out for errands today, leaving limited time for coding. However, if the schedule allows, I’ll test integrating uw_realtime_stt into uw_chess. This has the potential to be a significant milestone. Although achieving this today seems improbable, the performance of whisper-distill is promisingly above average. Nonetheless, it requires further refinement to optimally and reliably register UCI moves - [08:30]",
                    "agenda":[],
                    "methods":"No code today. Been reading up on python conventions, and documentation practices - [00:00]",
                    "insights":"Some days you need to switch focus. - [00:00]", 
                    "conclusions":"Tomorrow is a new day - [00:00]",
                    "image": "./logbook/images/2023-12-21.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "22":{
                    "weekday": "Friday",
                    "project":"Logbook",
                    "objective":"On Saturday I'll start promoting my github page on Linkedin. In preparation for that i’ll update the logbook with a pdf section for LaTex articles I write. - [11:00].",
                    "agenda":["Render PDF document to web browsers", "Update Resume button to a 'more' button"],
                    "methods":"Rendering a PDF to web browsers is more difficult than I thought. Found a javascript library pdf.js that solved most issues - [00:00]",
                    "insights":"I'm good at design and enjoy making things look nice but I don’t like web developing, it is a necessary and valuable skill. But I find myself 'pixel pushing most of the time' - [00:00]", 
                    "conclusions":"Thank god for chat gpt, it speeds up small web updates like this - [00:00",
                    "image": "./logbook/images/2023-12-22.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "25":{
                    "weekday": "Monday",
                    "project":"Logbook",
                    "objective":"Christmas is over and I am eager to start 2024 early. Going to initiate some marketing experiments in anticipation for coming product launches and start building a physical blackboard for scheduling and planning - [11:30]",
                    "agenda":["Blackboard", "Multiple answer countdown"],
                    "methods":"For the multiple answer quizzes program I'm using the ‘tqdm’ library for visualizing progress bars and ‘rich’ library for creating and updating tables in the shell. I'll probably have time to finish the blackboard tomorrow - [22:30]",
                    "insights":"Multiple answer quizzes is a popular method for educational content. I got the inspiration from a post linked in for countdown to the correct answer. It makes for engaging content, latching on to human curiosity. I will make this a feature in an upcoming flagship project - [22:30]", 
                    "conclusions":"This was a good day, and 2024 feels promising - [22:30]",
                    "image": "./logbook/images/2023-12-25.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "29":{
                    "weekday": "Friday",
                    "project":"General Planing",
                    "objective":"The prospect of only two days remaining in the year is both intimidating and exhilarating. The previous week has been characterized by sluggish and somewhat resentful work efforts. With financial resources dwindling rapidly, the mounting stress is paradoxically energizing, transforming the fear of failure into a potent motivator. Today, I'm adopting a broader viewpoint and focusing on foundational elements to set the stage for a successful year. This includes completing the blackboard setup in my office and developing prototype blueprint for a flagship product. - [08:30]",
                    "agenda":["Blackboard", "Product blueprint"],
                    "methods":"The blackboard consists of a glass sheet with a dual-sided design: one side is painted, suitable for chalk use, and the other side is blank, compatible with whiteboard markers. The frame dimensions are 45mm x 95mm and 45mm x 45mm. Tomorrow's task is to attach wheels to enhance mobility. The blueprint for the flagship product's prototype is conceptualized, pending the cutting of pieces for the mold. - [Saturday 01:00]",
                    "insights":"I find great enjoyment in woodworking, there's a unique sense of accomplishment in creating something tangible from my own drawings. - [Saturday 01:00]", 
                    "conclusions":"I'm still sluggish, but any improvement is still a step forward. - [Saturday 01:00]",
                    "image": "./logbook/images/2023-12-29.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "30":{
                    "weekday": "Saturday",
                    "project":"General Planing",
                    "objective":"Last night, my LinkedIn post was featured in the 'Python Developers' community, reaching over 2 million followers – a gratifying achievement. However, I stayed up too late. Today, the eve of New Year's Eve, I'm focused on completing yesterday's tasks: attaching wheels to the blackboard and cutting out the parts for the product mold - [09:00] Although not apart of todays plan, I managed to do some work on “Doors”, more about in the next year. - [00:00]",
                    "agenda":["Blackboard", "Product blueprint"],
                    "methods":"The construction involved cutting the pieces, followed by gluing and screwing them together. Some pieces were intentionally left unglued for easy disassembly and material reuse, if needed. The surface is rugged on one side, suitable for chalk, and glass on the other side suitable for markers - [00:00]",
                    "insights":"Despite having quality tools, the precision of the outcome is greatly influenced by the sequence of operations in a task. I often rely on eyeballing parts, which is a valuable skill in itself. I have a strong intuition for what will work and can effortlessly visualize or modify schematics in my mind - [00:00]", 
                    "conclusions":"Woodworking, as a hobby, enhances my productivity. The experience of using tools and crafting something with my own hands brings an unmatched sense of fulfillment - [00:00]",
                    "image": "./logbook/images/2023-12-30.png",
                    "video_url": "https://youtube.com/embed/dSGIGdd4DP8?si=Q_sL9XiQJEl5aQli",
                    "alt_text": ""
                }
        }
    },
    "2024": {
        "Jan": {
            "01":{
                    "weekday": "Monday",
                    "project":"Logbook",
                    "objective":"Kicking off the new year, I'm taking it slow due to post-celebration sluggishness. Today, my focus is on minor yet significant tasks: revising the logbook entry sorting for the new year and enhancing the 'Doors' project readme with a brief overview by - [17:00]",
                    "methods":"Was slinging code back and forth with chat gpt in order to update the java-script for logbook entries. I hate web-design, and see it as a necessary but not something I enjoy. The “Doors” readme got updated with the abstract of a light paper im working on  - [00:00]",
                    "agenda":["Logbook entries update", "Doors readme"],
                    "insights":"Using AI to write low level code is such a time saver. Especially today when I was feeling the aftermath of new years - [00:00]",
                    "conclusions":"Even though the year started slowly, I managed to take some pieces of the board today. - [00:00]",
                    "image": "./logbook/images/2024-01-01.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "02":{
                    "weekday": "Tuesday",
                    "project":"Logbook",
                    "objective":"Today, I'm feeling energized and plan to enhance various frameworks. I'll focus on refining a LaTeX template designed for annotating educational programming content on LinkedIn, aiming to optimize its formatting. Additionally, I intend to modify a post about Python package version conventions, which previously garnered significant engagement - [13:00]. I found some spare time, so I'll delve into an alpha build of 'Doors' - [21:00]",
                    "methods":"I've designed a LaTeX document tailored for creating concise 'How To' tutorial slides. This approach appears effective, as evidenced by both my attempts to get featured in the Python community on LinkedIn being successful using this format - [21:00]. Doors alpha package is up, doors 0.1.0-alpha. The alpha version serves as an initial prototype designed for feature testing - [00:00].",
                    "agenda":["Version conventions pdf", "Doors alpha package"],
                    "insights":"Navigating social media is a challenge I'm actively working to master. I strive for detail and precision, yet a typo slipped through on the first page. It's frustrating, but it serves as a valuable reminder to accept mistakes, move forward and do better next time - [21:00].",
                    "conclusions":"It feels good to cross off a task, but I need to go to bed earlier - [00:00].",
                    "image": "./logbook/images/2024-01-02.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "03":{
                    "weekday": "Wednesday",
                    "project":"Doors",
                    "objective":"This morning is off to a great start. I've begun listening to 'The 12 Week Year,' a book focused on boosting urgency to enhance efficiency. I'm two chapters in, and the intensity is palpable. My goals for today include creating a progress video for the 'Doors' package and crafting an AI community post. While they may seem unrelated, both tasks aim to gain experience in short-form ed-tech frameworks and formats  - [08:30].",
                    "methods":"Updated the Doors Readme and successfully tested package installation and course addition. This build lays the foundation for extended testing of features. Additionally, designed a new template for LinkedIn short-form content slides - [01:00].",
                    "agenda":["‘Doors’ progress video", "AI community post"],
                    "insights":"Every new content template and progress video I create bolsters my confidence. It's not the current quality, because it is admittedly flawed in many areas. But the consistent improvements I observe are nourishing. Persisting in this manner will inevitably lead to positive outcomes - [01:00].",
                    "conclusions":"Keeping this logbook really makes a difference, It forces me to reflect and acknowledge my shortcoming but also celebrate my achievements - [01:00]",
                    "image": "",
                    "video_url": "https://www.youtube.com/embed/-oRG-jt0Jds?si=FfhQd5Y6KX-oY4TS",
                    "alt_text": ""
                },
            "04":{
                    "weekday": "Thursday",
                    "project":"General Planning",
                    "objective":"Today I’m picking up a flagship project previously referred to as Aetherus but will get a new name after today. It is a voice command chatbot for educational assistance. I have a working prototype powered by Meta's Llama2 model, but I haven't looked at the project for about two months now so will focus on sprint planning for an upcoming marketing campaign where this project will be in focus - [08:00].",
                    "methods":"Testing a planning framework I learned from the book I’m reading ‘12 week year’, it’s similar to scrum. Went over the repository to see where it left it, it was a creative mess, but a lot of good functions to optimize. - [23:30].",
                    "agenda":["Sprint planning", "Repository review"],
                    "insights":"I tried posting the slides above on an AI community on Linked in without luck. It’s difficult to say if the content is bad or just didn’t make the cut . Probably the latter since there are over 2M members in the community and they only post 10-15 post per day. - [23:30].",
                    "conclusions":"I’m falling into a motivational downtrend, but I have a good framework to fall back on. Trust the process - [23:30]",
                    "image": "./logbook/images/2024-01-04.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "05":{
                    "weekday": "Firday",
                    "project":"General Planning",
                    "objective":"The sprint I planned for yesterday has a target set this Sunday for what I call a project demo. So there are a lot of ‘pieces that need to be taken off the board’ so to speak. Move forward with the day I will clean up the project structure to accommodate the Sunday ‘alpha’ build. Most of the code is already written, but needs to be structured and optimized for intended usage - [08:00].",
                    "methods":"Not much to report, tested the script for ’BiBi’, and it works fine but the interaction is really bad. It requires an audio activation command. Which I plan to get rid of to make the interaction more natural - [01:00].",
                    "agenda":["Test run ‘BiBi’", "Python package structure"],
                    "insights":"I enjoy the process, but I'm at a point where progress is slow and I need to learn some new developer skills to move forward  - [01:00].",
                    "conclusions":"Trust the process and keep working  - [01:00].",
                    "image": "",
                    "video_url": "",
                    "alt_text": ""
                },
            "06":{
                    "weekday": "Saturday",
                    "project":"bibi",
                    "objective":"I will make a demo/progress update of BiBi tomorrow so today requires that I finalize the bare minimum of the python package. At this moment BiBi isn’t anything impressive, and there are a lot of projects that do audio chat-bots better. But I want to build BiBi from the ground up, to learn and to shape her into the vision I have, an AI grandmother - [11:00].",
                    "methods":"Created a python package using pyproject.toml for build system requirements. Have some issues running the packaged version because there are api-keys required to run the models. Thinking of setting up arg-flags for parsing keys - [01:00].",
                    "agenda":["BiBi Python package"],
                    "insights":"Started reading a new book today, ‘Why we sleep’. I'm 2 chapters in and I’ve decided to set a non-negotiable time for sleep. Who knew sleep was such a great thing, jokes aside. Sleep is great for learning and processing new information, and I have a lot I want to learn - [01:00].",
                    "conclusions":"It’s been a good day, but besides sleep, I need to look at my work life balance  - [01:00].",
                    "image": "",
                    "video_url": "",
                    "alt_text": ""
                },
            "07":{
                    "weekday": "Sunday",
                    "project":"python_fundamentals",
                    "objective":"It’s the last day of the first week of the year. This week has been good, it started slow but I managed to pick up the pace towards the end. Today I'll take a mellow sunday and rest, listen to my audio book ‘Why we sleep’ and learn how to write unittest in python  - [11:00].",
                    "methods":"Started a new repo for studying, the way to learn is to teach, and even though I doubt anyone will use this repo. But I learn a lot faster when refining a new skill into a compress tutorial - [23:30].",
                    "agenda":["Learn unittest"],
                    "insights":"I usually plan important tasks for the day in the morning. This coming week I'll plan the next day in advance before the current day ends - [11:00] Got some nice new ideas from the book about learning. Apparently as a human we have different sleep cycles and perform the best in the coming hours after we wake up. And in contrast worse at the end of the day. I notice this when playing chess. This would be a really new feature to have in “Doors” a test that is adaptive and can tell what level of cognitive performance you are in - [23:30].",
                    "conclusions":"There is a lot more to learning then just reading and applying, nature vs nurture is something I’m excited to look into more. Have a book written by Jim Kwik I read 2 years back, I will read that again next to get some more inspiration for Doors - [23:30].",
                    "image": "",
                    "video_url": "",
                    "alt_text": ""
                },
            "08":{
                    "weekday": "Monday",
                    "project":"doors",
                    "objective":"First day of the second week of the year feels like it’s going to be a good week. Today I will Implement at unittest and github action for auto testing json format for multiple-choice-question courses. The ide is that anyone can add courses as pull requests, and if the course passes the check it will automatically be merged - [09:00]",
                    "methods":"Wrote a comprehensive script that checks all levels of the json document, and returns true if format is correct. This is a fist implementation of unitesting and will be improved. This is also the first time I use Github actions. - [23:30].",
                    "agenda":["Write unittest script", "Create github action"],
                    "insights":"Automating pull request review is a really powerful tool. I'm envisioning a community driven platform where users generet the education content, design features and tests will be a crucial skill me and the future team will need to have. I’ve been thinking about a feature for ‘bibi’ as well. I want to place documents in a directory, on topics I am currently studying, that she learns and we later can have conversations about. A tool like chat-gpt already solves this very well, but I'm interested in the aspect of continuously training an AI. This feature is inspired by the saying that ‘you learn best by teaching’.  - [23:30].",
                    "conclusions":"Learning unittesting and github actions feel like unlocking a new power. It’s been a good day.  - [23:30].",
                    "image": "./logbook/images/2024-01-08.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "09":{
                    "weekday": "Tuesday",
                    "project":"doors",
                    "objective":"This week will go to micro improvements and studying. The past 2 days I have learned about and implemented automated unit testing of json format for mcq_courses. The idea with the whole Doors ecosystem is that anyone can add courses, so it is important to have automated tests for contributions. But as it stands now, Doors is barely at its infancy, and the core of the project has yet to be actualised. Right now I think Doors could be a really cool roguelike game, although I'm still learning what those types of games are - [10.30].",
                    "methods":"Roguelike games derive from a concept of procedural level generation, and Permadeath, short for permanent death.  It all started with a game called Rouge developed in the 1980’s, which is an RPG dungeon crawler game. When a player dies they start from the beginning, a feature i'm not sure suites an educational journey but there is a sub genera called Roguelite, with alloys for ability to pass one to the next life, this is metaphorically suitable for education, if you fail a test some knowledge stays with you. Procedural means that the game scene is somewhat randomly generated from a fixed set of variables or game assets, at each new game. This requires skill mastery rather than recall, also a trait suitable for education - [23.30].",
                    "agenda":["Research roguelike games."],
                    "insights":"The aspect of procedural courses is very intriguing and since I'm still a solo developer, the roguelike genre is a good place to start since it is an indie game genre  - [23.30].",
                    "conclusions":"‘Doors’ is education hidden in gaming, and there are many routes one can take to mastery. Next up will be to come up with a very basic game idea. I think it will have to be something interesting I can do with ASCII graphics, like the original Rogue game - [23.30].",
                    "image": "./logbook/images/2024-01-09.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "10":{
                    "weekday": "Wednesday",
                    "project":"doors",
                    "objective":"This is a study week, or you may also call it research and development. Today ill start working on what i call a ‘door’ in the Doors ecosystem. It is figuratively a door that needs to be unlocked, and the educational exercise is to figure out how to unlock the door - [09:00].",
                    "methods":"Been looking at roguelike games to find inspiration, but no real coding today. Test design a ASCII Door visual. The basic gist is that the ‘Doors’ ecosystems is a sort of open world, with mini games that are the courses. Each course is a json document with one door or several doors, and the learning experience is to find a way to open the doors. This will require some imagination from the course creators to set parameters that if solved will open the. The door on the image is made of wood, steel and glass and there is a 3 digit padlock on the door. So a player could scavenge resources to create thermite and burn the door, learning about chemistry, or brute force the combination to the padlock or learn basic cryptography for deciphering the code - [23:30].",
                    "agenda":["Create a roguelike idea", "Design a ‘door’"],
                    "insights":"Designing the game mechanics is daunting, I don't want to fall into the trap of pixel pushing so ASCII graphics is the way to go. If I can make something that is interesting with the bare minimum of visulas, then I have a backend that is worth building graphics on - [23:30].",
                    "conclusions":"I’ve been playing a lot of chess and listening to my audiobook the past few days. It’s been nice to take a break, think and gather inspiration - [23:30].",
                    "image": "./logbook/images/2024-01-10.png",
                    "video_url": "",
                    "alt_text": ""
                },
            "11":{
                    "weekday": "Thurday",
                    "project":"doors",
                    "objective":"Today I’ll get back into coding, wan’t to test some rendering examples of the ASCII - ‘door’. Also need to produce and schedule some new links in content, the content that's been working best is code examples, so I'll fix a few of those with the LaTex boilerplate I've made. And see if I can reuse some old text posts in the new visual PDF-slides format I'm using - [10:00]",
                    "methods":"Created a script for rendering a ASCII-graphics door, and i'm really satisfied with the look and feel of. The example has a 50ms sleep method and It gives a very retro hacker vibe to it. The function taks a text document with the door graphics and then does some string manipulation to insert data from a json file with the door properties. The goal of the game would be to get all values down to 0 in order to open the door - [23:30].",
                    "agenda":["Doors rendering script"],
                    "insights":"Because the door is rendered line by line it feels like turning a page, which fits the concept of studying while gaming. The future version will have many rendering capabilities but for now this is enough to get the idea - [23:30].",
                    "conclusions":"Even though this week's progress so far feels small, I'm satisfied with moving forward  - [23:30].",
                    "image": "",
                    "video_url": "https://www.youtube.com/embed/qhhHWj_0xgA?si=yPaldKX33sV0jRX6",
                    "alt_text": ""
                },
            "12":{
                    "weekday": "Friday",
                    "project":"doors",
                    "objective":"Today I really need to produce some LinkedIn content, been slacking off on that front and my buffer of scheduled content is running out. Besides that I'll start testing some basic game mechanics, and decide on whether to create a flask web UI or keep it to terminal for the time being - [10:30].",
                    "methods":"Found a native python library that is exactly what i need ‘curses’. I've never heard of it before but it is used for creating text-based user interfaces, and I was able to make a simple test that looks very much like the original Rogue game  - [23:30].",
                    "agenda":["Doors rendering script"],
                    "insights":"At some point I will need to start user testing but building out a web UI doesn't feel like time well spent, unless the web framework is something I can use for a later version. I have experience building with Flask as a backend web framework, and if it is required to get someone to test, that’s what I’ll do  - [10:30]. I like the Roguelike feature of procedurally generating levels, and the use of navigating between rooms like in the original Rogue game. I have a faint memory of reading, that activating the part of the brain used for learning direction to a location, can help with memory, like learning a formula as a song. Having the player navigate to resources might be advantages for learning  - [23:30].",
                    "conclusions":"I'm at a stage where I have a lot of good ideas, and now I need to code them  - [23:30].",
                    "image": "",
                    "video_url": "https://www.youtube.com/embed/TvCFmIIHgac?si=w8CAmYveQgeKanbb",
                    "alt_text": ""
                },
            "13":{
                    "weekday": "Saturday",
                    "project":"doors",
                    "objective":"Today I'm eager to build the first game mechanics for ‘Doors’, it will be a text based terminal role playing game. I’ll look at building classes and functions to handle player data. If I have time I’ll keep working on the procedural level generation - [08:30].",
                    "methods":"Created a basic player class that updates a json file with player data and tested some more game play movement logic - [22:30].",
                    "agenda":["Doors game mechanics"],
                    "insights":"I’ve started reading the book ‘Limitless’ by Jim Kwik. It's about learning and improving comprehension and memory. In it he is using the metaphor of ‘the hero's journey’ a lot and I have a memory of hearing Dr Jordan Peterson talking about writing one's own improvement goals as being the hero of one's story. This led me to think of each player starting with only a Name, that they pick themselves. Then a cornerstone feature is to venture out and find new skills to add ass attributes. Maybe adding some sort of uniqueness to each player's own learning journey - [22:30].",
                    "conclusions":"Didn’t get as much coding done as I wanted but I have refined the idea further, Sunday is always a great day for coding - [22:30].",
                    "image": "",
                    "video_url": "https://www.youtube.com/embed/FzN8WEpAz2o?si=hufWhP_r6DGmxAVp",
                    "alt_text": ""
                },
            "14":{
                    "weekday": "Sunday",
                    "project":"doors",
                    "objective":"It’s Sunday, i'm well rested and i had some really good ideas i wrote down while waiting to fall asleep last night. I'm still very inspired by the Rogue game, but ‘Doors’ can't have permadeath because it might stifel learning progress, something I learned from a research project by Mark Rober on learning, where players complete a task more often if points are not taken away when failed. So the idea now is that the game is a Maze, and somewhere inside the maze there is a Door that leads to a new maze with a new door. Each door is a new learning step in the course, and when you solve all the doors you receive your reward. I’ll spend the day coding the procedural maze with the door inside it - [09:00]",
                    "agenda":["Doors game mechanics"],
                    "methods":"Created a procedural gratated maze using a lot of while loops and if-statement. This is just a test for now and I will circle back to refine the maze generation - [23:00].",
                    "insights":"I’ve been thinking of how to start off as a new player, and as a first taks i think each new player will have to find the “random.seed()” so that the maze doesn't change between runs. This could be that they find something and get to pick their own number - [23:00].",
                    "conclusions":"I’m back baby!! Had a really nice day coding, I have been sleeping well, drinking lots of water and exercising. All the stuff they say is good - [23:00].",
                    "image": "",
                    "video_url": "https://www.youtube.com/embed/88PQoyVbBYw?si=Ck4s7GHxxWT_7xRY",
                    "alt_text": ""
            },
            "15":{
                    "weekday": "Monday",
                    "project":"doors",
                    "objective":"New day and week. Had a really relaxed weekend, and I feel well rested with a lot of new ideas. Today I need to look at the 12-week plan and estimate progress. Read about Test Driven Development (TDD) this morning and want to test that development framework on a feature. Doors is at the moment a procedurally generated maze, and empty. So I need to fill it with something. In order to meet my vision the project needs to heavenly rely on tests, so that anyone can contribute with eaze. This might have to be a ‘tests’ week - [09:00].",
                    "agenda":["Doors game mechanics test"
                    ,"Review 12-week plan"],
                    "methods":"Did not get much done on the code, but tested spawning game items.Did not do any TDD, but i'll look into that once i start refactoring code. Looked over my 12 week plan and evaluated my targets - [00:00].",
                    "insights":"I need to schedule specific work hours for the project to meet my target, as the code base grows I need to be more methodical with managing my time. A fun thing though, I got my first subscriber on youtube, a big milestone. And I’ve received three positive comments on these short progress videos, it made my day - [00:00].",
                    "conclusions":"Time management is something I need to work on - [00:00].",
                    "image": "",
                    "video_url": "https://www.youtube.com/embed/1CMAqtsEjPw?si=H6SfkDL9f6KwZ8k9",
                    "alt_text": ""
            },
            "16":{
                    "weekday": "Tuesday",
                    "project":"doors",
                    "objective":"Today I'm testing Test Driven Development (TDD) on game item imports from a json file. Something small so I can focus on creating good tests. I also need to move all game mechanics development from the ‘tests’ branch ‘gamemechanics’ branch - [08:30]",
                    "agenda":["game_item.json TDD tests,", "move development to side new branch"],
                    "methods":"Tested the ‘Test Driven Development’ (TDD) approach, and I must say it is a perfect approach for this project. It’s a slower approach but generating the tests at the same time as the code I think saves a lot of time. For now I will only do TDD for the json imports, which serve as the first gateway for community contributions in the form of courses. When I come to a stage where the project starts taking an MVP structure I’ll circle back and use the TDD approach while refactoring  - [22:30].",
                    "insights":"I’m reading a book at the moment about learning, and in it the author mentions ‘small win wins’ leads to mentum, and I've heard it before. In the other book about programming and TDD I found yesterday, the author mentions the ‘Sorites Paradox’, and uses it as breaking down any size programming task into small grains of sand and removing them one by one. I'm good at breaking down large tasks into chunks but I'll try the Sorites Paradox method - [08:30] I got 8 new subscribers overnight on youtube, and got a bunch of positive comments. It Feels really surreal because the game tests are less than a minute and there is no commentary. But I am literally giggling with joy. From the comments it seems to be other developers taking interest, and developers are always nice people - [22:30].",
                    "conclusions":"Developers are nice people! I’m at a good place with the project and if I keep this pace I’ll have a working POC by the end of next week - [22:30].",
                    "image": "./logbook/images/2024-01-16.png",
                    "video_url": "",
                    "alt_text": ""
            },
            "17":{
                    "weekday": "Wednesday",
                    "project":"doors",
                    "objective":"Today I'm refining the game mechanics, right now there is a leading dot and a tail of one coordinate, illuminating the path in all 4 directions and I want to up that with 3 on the tail and 2 leading. I also want there to be ‘illumination pickups’ that reveal the entire map for a few game loop cycles. And i need to do some reading on reinforcement learning reward functions, going to look at ‘Proximal Policy Optimization’ (PPO) - [07:30]",
                    "agenda":["illumination pickups", "player path tails", "Study (PPO)"],
                    "methods":"Got done with the illumination pickup test, and added an extra radius to the visible path. A lot of time was spent on separating vital functions into different modules. But as the codebase grows I'm noticing the lack of documentation. For anyone else to navigate the game mechanics would be a nightmare. Tomorrow I should take the day to clean up, refactor and create docstrings. Read about PPO, but very briefly. Will need to do some practical tests for it to sink in. I read about an example of a tetris playing agent that sounds like a fun exercise - [23:00].",
                    "insights":"The audiobook I'm listening to now,  ‘Limitless’ by Jim Kwik, is really inspiring. He grew up with a learning disability and now is a leading voice in techniques on how to learn, remember comprend information at an accelerated rate. It sounds like snake oil from first glance but he talks about it in terms of very simple techniques that require no high level of intellect to implement. It’s akin to getting physically fit. There is now magic-trick, just do the workout, and live healthy. But when it comes to learning most of us don't even know what the different learning-workouts are. I truly believe human intellect has barely scratched the surface, and we will look back at current higher academic goals as average cognitive skills for our children  - [23:00].",
                    "conclusions":"It’s been a good day, it always feels like the day isn’t nearly as long as it should be but that’s probably a good thing  - [23:00].",
                    "image": "",
                    "video_url": "https://www.youtube.com/embed/FGsBGA2Xdos?si=WwyCZRCHmIWNjcJ6",
                    "alt_text": ""
            },
            "18":{
                    "weekday": "Thursday",
                    "project":"doors",
                    "objective":"I need to set aside some time for a Linked In post, my scheduled buffer is empty but this is a pristine time to study some new topics and respite some old. I will also start the code cleanup by moving the game mechanics from devs.py to game.py and refactoring along the way. I will also update the maze generation. I have some ideas I want to implement. The maze should cover more of the available space, and for that the generation algorithm needs to be updated - [07:30]",
                    "agenda":["Game Loop cleanup", "Improve generate_maze", "LinkedIn posts"],
                    "methods":"Dusted off Adobe Illustrator and created an infographic that I will make into a series of posts. These can serve as “bread and butter” content that I can produce relatively quickly to fill in the gaps where energy or productivity is low, and I also enjoy the process of infographic typography. Refactored generate_maze function and improved it slightly but as i increase the size of the board the function leaves large segments un-mazed. But rather than alter this function more I will create a new one that generates a different style maze. Most of the functions are in place and separated into appropriate manuals. Next is to implement the doors that are the main feature of the game play - [22:30]",
                    "insights":"The game is coming along nicely and I’m trying to resist the urge of starting another project. Once the course functionality is in place I can start creating tutorials on how to use the project which will serve as marketing tool as well - [22:30]",
                    "conclusions":"I have difficulty with not spreading myself thin and working on too many parts at the same time. Even Though they all serve as segments of a greater whole, I need to finish one part before moving on to another - [22:30]",
                    "image": "./logbook/images/2024-01-18.png",
                    "video_url": "",
                    "alt_text": ""
            },
            "19":{
                    "weekday": "Friday",
                    "project":"doors",
                    "objective":"Feeling good this morning! I want to start experimenting on how to create courses next week, and what's left for that is to add the Doors. This is an anticipated step and milestone, but I know what to do. This won't be the final framework but It’s a great place to start - [08:00]",
                    "agenda":["Place Door in Maze", "Redner door from Maze"],
                    "methods":"The doors are in place procedurally placed as the game starts. Each door is for now a dictionary with parameters symbolizing the doors composition. This is where educators will have to be creative and figure out what the “key” features for understanding the topic being taught are to craft Door parameters. Then sprinkle the map with quest or loot to unlock the Door - [23:00]",
                    "insights":"Small continuous steps lead to great accomplishments. Consistency is my achilles heel, but “this time feels different” - [23:00]",
                    "conclusions":"The codebase I growing in complexity and it is soon critical for me to start refactoring - [23:00]",
                    "image": "./logbook/images/2024-01-19.png",
                    "video_url": "",
                    "alt_text": ""
            },
            "20":{
                    "weekday": "Saturday",
                    "project":"doors",
                    "objective":"It’s Saturday and the week is almost finished. Today I’m just focusing on catching up with tasks, fortunately I'm at a good place with the Doors game, but the code is a mess and I need to start refactoring before moving on with implementing the core mechanics of the entire program, creating engaging courses - [10:00]",
                    "agenda":["Refactor Graphics.py", "Upload progress video"],
                    "methods":"I enjoy the refactoring process, learning how to pass operators as arguments to functions which is really useful. I'm using lists of arguments and passing them as iterables in for-loops to generate compressed functions  - [22:30]",
                    "insights":"Refactoring is maybe the most enjoyable part of coding, it’s intellectually challenging in a vary reading way. For the next features I will do the test driven development approach. I was thinking about the TDD approach and It dawned on me that the Doors framework for creating educational courses will be akin to TDD: as an educator you create the test first which is the ”Door” then you create the course which is the game that must be played to open the Door. What I gather from TDD is to not do more than is required to pass the test. This might sound bad for learning, but I believe it makes for learning that is directly applied. Which is how it works in the real world. You are faced with a challenge and then need to figure out how to overcome it. As an educator you have to come up with engaging challenges - [22:30]",
                    "conclusions":"I’m on top of things and moving in the right direction. Not as fast as I want but I’m doing a lot of things for the first time and gaining new valuable experiences - [22:30]",
                    "image": "",
                    "video_url": "https://www.youtube.com/embed/Qghj_IY6Zdc?si=iUJbcmdrQrRE7nNh",
                    "alt_text": ""
            },
            "21":{
                    "weekday": "Saturday",
                    "project":"doors",
                    "objective":"Today I’ll do refactoring on game_mechanics.py and improve docstrings. If I have time I will start writing some tests and create some Linked In posts. But I doubt I'll have the energy. I think I should take some time to just play chess, watch some series and relax today as well - [07:30]",
                    "agenda":["Refactor game_mechanichs.py", "Linked in posts"],
                    "methods":"Manages to get mayne an hour of refactoring done, and the overall code readability is decent now. Got a book review and an infographic done, so over all the day was pretty productive - [22:30]",
                    "insights":"Played a lot of chess today, 3min Blitz is the best! And it reminded me of a feature I want to implement. In the book, Why we sleep by Matthew Walker, he mentions that our hours of cognitive pike performance is different and may vary depending on if you are nocturnal or diurnal, energetic at night or day. And blitz is a very repetitive and fast paced form of chess, and I notice straight away if I'm in a high or low congestive state when I play. The feature would be something more simple then chess but that requires fast responses that are near automatic. I would create an analytical model that gives a personal score to determine if you are at your best or not. Over time you could determine at what time of day you function best - [22:30].",
                    "conclusions":"It’s been a good week, and things are coming along nicely. There is still a lot I can improve with my work routines. Tomorrow is a new week! Let’s Go! - [22:30].",
                    "image": "./logbook/images/2024-01-21.png",
                    "video_url": "",
                    "alt_text": ""
                }
            }
    }
}
